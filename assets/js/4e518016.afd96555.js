"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9142],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=o.createContext({}),l=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=s,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return t?o.createElement(h,a(a({ref:n},c),{},{components:t})):o.createElement(h,a({ref:n},c))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,a=new Array(r);a[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var l=2;l<r;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80831:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var o=t(87462),s=t(63366),r=(t(67294),t(3905)),a=["components"],i={title:"[TS] ts-axios(20) - \u5355\u5143\u6d4b\u8bd5(\u8f85\u52a9\u6a21\u5757)",sidebar_position:28},p=void 0,l={unversionedId:"TypeScript/ts-axios-20",id:"TypeScript/ts-axios-20",title:"[TS] ts-axios(20) - \u5355\u5143\u6d4b\u8bd5(\u8f85\u52a9\u6a21\u5757)",description:"----------------------------------------------------------------",source:"@site/docs/TypeScript/ts-axios-20.md",sourceDirName:"TypeScript",slug:"/TypeScript/ts-axios-20",permalink:"/docs/TypeScript/ts-axios-20",editUrl:"https://github.com/aokikoko/aokikoko.github.io/blob/main/website/docs/TypeScript/ts-axios-20.md",tags:[],version:"current",sidebarPosition:28,frontMatter:{title:"[TS] ts-axios(20) - \u5355\u5143\u6d4b\u8bd5(\u8f85\u52a9\u6a21\u5757)",sidebar_position:28},sidebar:"tutorialSidebar",previous:{title:"[TS] ts-axios(19) - \u5355\u5143\u6d4b\u8bd5(Jest\u5b89\u88c5\u914d\u7f6e)",permalink:"/docs/TypeScript/ts-axios-19"},next:{title:"[TS] ts-axios(21) - \u5355\u5143\u6d4b\u8bd5(\u8bf7\u6c42\u6a21\u5757\u4e0eheaders\u6a21\u5757)",permalink:"/docs/TypeScript/ts-axios-21"}},c=[{value:"\u8f85\u52a9\u6a21\u5757",id:"\u8f85\u52a9\u6a21\u5757",children:[{value:"\u5355\u5143\u6d4b\u8bd5\u51c6\u5907\u5de5\u4f5c",id:"\u5355\u5143\u6d4b\u8bd5\u51c6\u5907\u5de5\u4f5c",children:[],level:3},{value:"util \u6a21\u5757\u6d4b\u8bd5",id:"util-\u6a21\u5757\u6d4b\u8bd5",children:[],level:3},{value:"cookie \u6a21\u5757\u6d4b\u8bd5",id:"cookie-\u6a21\u5757\u6d4b\u8bd5",children:[],level:3},{value:"data \u6a21\u5757\u6d4b\u8bd5",id:"data-\u6a21\u5757\u6d4b\u8bd5",children:[],level:3},{value:"error \u6a21\u5757\u6d4b\u8bd5",id:"error-\u6a21\u5757\u6d4b\u8bd5",children:[],level:3},{value:"headers \u6a21\u5757\u6d4b\u8bd5",id:"headers-\u6a21\u5757\u6d4b\u8bd5",children:[],level:3},{value:"url \u6a21\u5757\u6d4b\u8bd5",id:"url-\u6a21\u5757\u6d4b\u8bd5",children:[],level:3}],level:2},{value:"\u8bf7\u6c42\u6a21\u5757",id:"\u8bf7\u6c42\u6a21\u5757",children:[{value:"jasmine-ajax",id:"jasmine-ajax",children:[],level:3},{value:"\u6d4b\u8bd5\u4ee3\u7801\u7f16\u5199",id:"\u6d4b\u8bd5\u4ee3\u7801\u7f16\u5199",children:[],level:3}],level:2}],u={toc:c};function d(e){var n=e.components,t=(0,s.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"\u8f85\u52a9\u6a21\u5757"},"\u8f85\u52a9\u6a21\u5757"),(0,r.kt)("h3",{id:"\u5355\u5143\u6d4b\u8bd5\u51c6\u5907\u5de5\u4f5c"},"\u5355\u5143\u6d4b\u8bd5\u51c6\u5907\u5de5\u4f5c"),(0,r.kt)("p",null,"\u901a\u5e38\u6211\u4eec\u4f1a\u4f18\u5148\u4e3a\u4e00\u4e2a\u5e93\u7684\u8f85\u52a9\u65b9\u6cd5\u7f16\u5199\u6d4b\u8bd5\uff0c\u6211\u4eec\u4f1a\u4f18\u5148\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-axios")," \u5e93\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"helpers")," \u76ee\u5f55\u4e0b\u7684\u6a21\u5757\u7f16\u5199\u6d4b\u8bd5\u3002\u6211\u4eec\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"helpers")," \u76ee\u5f55\uff0c\u521b\u5efa\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"boot.ts")," \u7a7a\u6587\u4ef6\uff0c\u8fd9\u4e2a\u662f\u56e0\u4e3a\u6211\u4eec\u4e0a\u8282\u8bfe\u7ed9 Jest \u914d\u7f6e\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"setupFilesAfterEnv")," \u6307\u5411\u4e86\u8fd9\u4e2a\u6587\u4ef6\uff0c\u540e\u9762\u7684\u7ae0\u8282\u6211\u4eec\u4f1a\u7f16\u5199\u8fd9\u4e2a\u6587\u4ef6\u3002"),(0,r.kt)("p",null,"\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u8fd0\u884c ",(0,r.kt)("inlineCode",{parentName:"p"},"npm test"),"\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u6267\u884c\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"jest --coverage")," \u6765\u8dd1\u5355\u5143\u6d4b\u8bd5\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b83\u4f1a\u62a5\u9519\uff0c\u6ca1\u6709\u5339\u914d\u7684\u6d4b\u8bd5\u6587\u4ef6\uff0c\u90a3\u662f\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," \u76ee\u5f55\u4e0b\u7f16\u5199\u4efb\u4f55\u4e00\u4e2a .spec.ts \u7ed3\u5c3e\u7684\u6d4b\u8bd5\u6587\u4ef6\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6765\u4e3a\u8fd9\u4e9b\u8f85\u52a9\u6a21\u5757\u7f16\u5199\u76f8\u5e94\u7684\u6d4b\u8bd5\u3002"),(0,r.kt)("h3",{id:"util-\u6a21\u5757\u6d4b\u8bd5"},"util \u6a21\u5757\u6d4b\u8bd5"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"test/helpers/util.spec.ts"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {\n  isDate,\n  isPlainObject,\n  isFormData,\n  isURLSearchParams,\n  extend,\n  deepMerge\n} from '../../src/helpers/util'\n\ndescribe('helpers:util', () => {\n  describe('isXX', () => {\n    test('should validate Date', () => {\n      expect(isDate(new Date())).toBeTruthy()\n      expect(isDate(Date.now())).toBeFalsy()\n    })\n\n    test('should validate PlainObject', () => {\n      expect(isPlainObject({})).toBeTruthy()\n      expect(isPlainObject(new Date())).toBeFalsy()\n    })\n\n    test('should validate FormData', () => {\n      expect(isFormData(new FormData())).toBeTruthy()\n      expect(isFormData({})).toBeFalsy()\n    })\n\n    test('should validate URLSearchParams', () => {\n      expect(isURLSearchParams(new URLSearchParams())).toBeTruthy()\n      expect(isURLSearchParams('foo=1&bar=2')).toBeFalsy()\n    })\n  })\n\n  describe('extend', () => {\n    test('should be mutable', () => {\n      const a = Object.create(null)\n      const b = { foo: 123 }\n\n      extend(a, b)\n\n      expect(a.foo).toBe(123)\n    })\n\n    test('should extend properties', function() {\n      const a = { foo: 123, bar: 456 }\n      const b = { bar: 789 }\n      const c = extend(a, b)\n\n      expect(c.foo).toBe(123)\n      expect(c.bar).toBe(789)\n    })\n  })\n\n  describe('deepMerge', () => {\n    test('should be immutable', () => {\n      const a = Object.create(null)\n      const b: any = { foo: 123 }\n      const c: any = { bar: 456 }\n\n      deepMerge(a, b, c)\n\n      expect(typeof a.foo).toBe('undefined')\n      expect(typeof a.bar).toBe('undefined')\n      expect(typeof b.bar).toBe('undefined')\n      expect(typeof c.foo).toBe('undefined')\n    })\n\n    test('should deepMerge properties', () => {\n      const a = { foo: 123 }\n      const b = { bar: 456 }\n      const c = { foo: 789 }\n      const d = deepMerge(a, b, c)\n\n      expect(d.foo).toBe(789)\n      expect(d.bar).toBe(456)\n    })\n\n    test('should deepMerge recursively', function() {\n      const a = { foo: { bar: 123 } }\n      const b = { foo: { baz: 456 }, bar: { qux: 789 } }\n      const c = deepMerge(a, b)\n\n      expect(c).toEqual({\n        foo: {\n          bar: 123,\n          baz: 456\n        },\n        bar: {\n          qux: 789\n        }\n      })\n    })\n\n    test('should remove all references from nested objects', () => {\n      const a = { foo: { bar: 123 } }\n      const b = {}\n      const c = deepMerge(a, b)\n\n      expect(c).toEqual({\n        foo: {\n          bar: 123\n        }\n      })\n\n      expect(c.foo).not.toBe(a.foo)\n    })\n\n    test('should handle null and undefined arguments', () => {\n      expect(deepMerge(undefined, undefined)).toEqual({})\n      expect(deepMerge(undefined, { foo: 123 })).toEqual({ foo: 123 })\n      expect(deepMerge({ foo: 123 }, undefined)).toEqual({ foo: 123 })\n\n      expect(deepMerge(null, null)).toEqual({})\n      expect(deepMerge(null, { foo: 123 })).toEqual({ foo: 123 })\n      expect(deepMerge({ foo: 123 }, null)).toEqual({ foo: 123 })\n    })\n  })\n})\n")),(0,r.kt)("p",null,"\u5176\u4e2d ",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/api#describename-fn"},(0,r.kt)("inlineCode",{parentName:"a"},"describe"))," \u65b9\u6cd5\u7528\u6765\u5b9a\u4e49\u4e00\u7ec4\u6d4b\u8bd5\uff0c\u5b83\u53ef\u4ee5\u652f\u6301\u5d4c\u5957\uff0c",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/api#testname-fn-timeout"},(0,r.kt)("inlineCode",{parentName:"a"},"test"))," \u51fd\u6570\u662f\u7528\u6765\u5b9a\u4e49\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5b83\u662f\u6d4b\u8bd5\u7684\u6700\u5c0f\u5355\u5143\u3002",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/expect#expectvalue"},(0,r.kt)("inlineCode",{parentName:"a"},"expect")),' \u662f\u65ad\u8a00\u51fd\u6570\uff0c\u6240\u8c13"\u65ad\u8a00"\uff0c\u5c31\u662f\u5224\u65ad\u4ee3\u7801\u7684\u5b9e\u9645\u6267\u884c\u7ed3\u679c\u4e0e\u9884\u671f\u7ed3\u679c\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e0d\u4e00\u81f4\u5c31\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002'),(0,r.kt)("p",null,"\u6d4b\u8bd5\u6587\u4ef6\u7f16\u5199\u597d\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u63a7\u5236\u53f0\u8fd0\u884c\u4e00\u6b21 ",(0,r.kt)("inlineCode",{parentName:"p"},"npm test"),"\uff0c\u770b\u4e00\u4e0b\u6d4b\u8bd5\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u8dd1\u4e86\u51e0\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff0c\u6d4b\u8bd5\u662f\u5426\u901a\u8fc7\uff0c\u6d4b\u8bd5\u8986\u76d6\u7387\u7b49\u3002"),(0,r.kt)("h3",{id:"cookie-\u6a21\u5757\u6d4b\u8bd5"},"cookie \u6a21\u5757\u6d4b\u8bd5"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"test/helpers/cookie.spec.ts"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import cookie from '../../src/helpers/cookie'\n\ndescribe('helpers:cookie', () => {\n  test('should read cookies', () => {\n    document.cookie = 'foo=baz'\n    expect(cookie.read('foo')).toBe('baz')\n  })\n\n  test('should return null if cookie name is not exist', () => {\n    document.cookie = 'foo=baz'\n    expect(cookie.read('bar')).toBeNull()\n  })\n})\n")),(0,r.kt)("p",null,"\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"p"},"document.cookie")," \u53bb\u8bbe\u7f6e cookie\uff0c\u5c31\u50cf\u5728\u6d4f\u89c8\u5668\u91cc\u4e00\u6837\u64cd\u4f5c\u3002"),(0,r.kt)("h3",{id:"data-\u6a21\u5757\u6d4b\u8bd5"},"data \u6a21\u5757\u6d4b\u8bd5"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"test/helpers/data.spec.ts"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { transformRequest, transformResponse } from '../../src/helpers/data'\n\ndescribe('helpers:data', () => {\n  describe('transformRequest', () => {\n    test('should transform request data to string if data is a PlainObject', () => {\n      const a = { a: 1 }\n      expect(transformRequest(a)).toBe('{\"a\":1}')\n    })\n\n    test('should do nothing if data is not a PlainObject', () => {\n      const a = new URLSearchParams('a=b')\n      expect(transformRequest(a)).toBe(a)\n    })\n  })\n\n  describe('transformResponse', () => {\n    test('should transform response data to Object if data is a JSON string', () => {\n      const a = '{\"a\": 2}'\n      expect(transformResponse(a)).toEqual({ a: 2 })\n    })\n\n    test('should do nothing if data is a string but not a JSON string', () => {\n      const a = '{a: 2}'\n      expect(transformResponse(a)).toBe('{a: 2}')\n    })\n\n    test('should do nothing if data is not a string', () => {\n      const a = { a: 2 }\n      expect(transformResponse(a)).toBe(a)\n    })\n  })\n})\n")),(0,r.kt)("h3",{id:"error-\u6a21\u5757\u6d4b\u8bd5"},"error \u6a21\u5757\u6d4b\u8bd5"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"test/helpers/error.spec.ts"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createError } from '../../src/helpers/error'\nimport { AxiosRequestConfig, AxiosResponse } from '../../src/types'\n\ndescribe('helpers::error', function() {\n  test('should create an Error with message, config, code, request, response and isAxiosError', () => {\n    const request = new XMLHttpRequest()\n    const config: AxiosRequestConfig = { method: 'post' }\n    const response: AxiosResponse = {\n      status: 200,\n      statusText: 'OK',\n      headers: null,\n      request,\n      config,\n      data: { foo: 'bar' }\n    }\n    const error = createError('Boom!', config, 'SOMETHING', request, response)\n    expect(error instanceof Error).toBeTruthy()\n    expect(error.message).toBe('Boom!')\n    expect(error.config).toBe(config)\n    expect(error.code).toBe('SOMETHING')\n    expect(error.request).toBe(request)\n    expect(error.response).toBe(response)\n    expect(error.isAxiosError).toBeTruthy()\n  })\n})\n")),(0,r.kt)("p",null,"\u8be5\u6a21\u5757\u8dd1\u5b8c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5206\u652f\u8986\u76d6\u7387\u662f\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"50%"),"\uff0c\u56e0\u4e3a\u7b2c\u5341\u4e03\u884c\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"super(message)\n")),(0,r.kt)("p",null,"\u8fd9\u4e2a\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"super")," \u7ee7\u627f\u5bf9\u6d4b\u8bd5\u8986\u76d6\u7387\u652f\u6301\u7684\u5751\uff0c\u76ee\u524d\u6ca1\u6709\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u5148\u5ffd\u7565\u3002"),(0,r.kt)("h3",{id:"headers-\u6a21\u5757\u6d4b\u8bd5"},"headers \u6a21\u5757\u6d4b\u8bd5"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"test/helpers/headers.spec.ts"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { parseHeaders, processHeaders, flattenHeaders } from '../../src/helpers/headers'\n\ndescribe('helpers:header', () => {\n  describe('parseHeaders', () => {\n    test('should parse headers', () => {\n      const parsed = parseHeaders(\n        'Content-Type: application/json\\r\\n' +\n          'Connection: keep-alive\\r\\n' +\n          'Transfer-Encoding: chunked\\r\\n' +\n          'Date: Tue, 21 May 2019 09:23:44 GMT\\r\\n' +\n          ':aa\\r\\n' +\n          'key:'\n      )\n\n      expect(parsed['content-type']).toBe('application/json')\n      expect(parsed['connection']).toBe('keep-alive')\n      expect(parsed['transfer-encoding']).toBe('chunked')\n      expect(parsed['date']).toBe('Tue, 21 May 2019 09:23:44 GMT')\n      expect(parsed['key']).toBe('')\n    })\n\n    test('should return empty object if headers is empty string', () => {\n      expect(parseHeaders('')).toEqual({})\n    })\n  })\n\n  describe('processHeaders', () => {\n    test('should normalize Content-Type header name', () => {\n      const headers: any = {\n        'conTenT-Type': 'foo/bar',\n        'Content-length': 1024\n      }\n      processHeaders(headers, {})\n      expect(headers['Content-Type']).toBe('foo/bar')\n      expect(headers['conTenT-Type']).toBeUndefined()\n      expect(headers['Content-length']).toBe(1024)\n    })\n\n    test('should set Content-Type if not set and data is PlainObject', () => {\n      const headers: any = {}\n      processHeaders(headers, { a: 1 })\n      expect(headers['Content-Type']).toBe('application/json;charset=utf-8')\n    })\n\n    test('should set not Content-Type if not set and data is not PlainObject', () => {\n      const headers: any = {}\n      processHeaders(headers, new URLSearchParams('a=b'))\n      expect(headers['Content-Type']).toBeUndefined()\n    })\n\n    test('should do nothing if headers is undefined or null', () => {\n      expect(processHeaders(undefined, {})).toBeUndefined()\n      expect(processHeaders(null, {})).toBeNull()\n    })\n  })\n\n  describe('flattenHeaders', () => {\n    test('should flatten the headers and include common headers', () => {\n      const headers = {\n        Accept: 'application/json',\n        common: {\n          'X-COMMON-HEADER': 'commonHeaderValue'\n        },\n        get: {\n          'X-GET-HEADER': 'getHeaderValue'\n        },\n        post: {\n          'X-POST-HEADER': 'postHeaderValue'\n        }\n      }\n\n      expect(flattenHeaders(headers, 'get')).toEqual({\n        Accept: 'application/json',\n        'X-COMMON-HEADER': 'commonHeaderValue',\n        'X-GET-HEADER': 'getHeaderValue'\n      })\n    })\n\n    test('should flatten the headers without common headers', () => {\n      const headers = {\n        Accept: 'application/json',\n        get: {\n          'X-GET-HEADER': 'getHeaderValue'\n        }\n      }\n\n      expect(flattenHeaders(headers, 'patch')).toEqual({\n        Accept: 'application/json'\n      })\n    })\n\n    test('should do nothing if headers is undefined or null', () => {\n      expect(flattenHeaders(undefined, 'get')).toBeUndefined()\n      expect(flattenHeaders(null, 'post')).toBeNull()\n    })\n  })\n})\n")),(0,r.kt)("p",null,"\u8fd0\u884c\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0 ",(0,r.kt)("inlineCode",{parentName:"p"},"parseHeaders")," \u6d4b\u8bd5\u7ec4\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"should parse headers")," \u6d4b\u8bd5\u6ca1\u901a\u8fc7\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"expect(parsed['date']).toBe('Tue, 21 May 2019 09:23:44 GMT')")," \u6211\u4eec\u671f\u671b\u89e3\u6790\u540e\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," \u5b57\u6bb5\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"Tue, 21 May 2019 09:23:44 GMT"),"\uff0c\u800c\u5b9e\u9645\u7684\u503c\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"Tue, 21 May 2019 09"),"\u3002"),(0,r.kt)("p",null,"\u6d4b\u8bd5\u6ca1\u901a\u8fc7\uff0c\u6211\u4eec\u68c0\u67e5\u4e00\u4e0b\u4ee3\u7801\uff0c\u53d1\u73b0\u6211\u4eec ",(0,r.kt)("inlineCode",{parentName:"p"},"parseHeaders"),' \u7684\u4ee3\u7801\u903b\u8f91\u6f0f\u6d1e\uff0c\u6211\u4eec\u53ea\u8003\u8651\u4e86\u7b2c\u4e00\u4e2a ":" \u53f7\uff0c\u6ca1\u8003\u8651\u540e\u534a\u90e8\u5206\u7684\u5b57\u7b26\u4e32\u5185\u90e8\u4e5f\u53ef\u80fd\u6709 ":"\uff0c\u6309\u6211\u4eec\u73b0\u6709\u7684\u903b\u8f91\u5c31\u4f1a\u628a\u5b57\u7b26\u4e32\u4e2d ":" \u540e\u9762\u90e8\u5206\u90fd\u622a\u65ad\u4e86\u3002'),(0,r.kt)("p",null,"\u56e0\u6b64\u6211\u4eec\u4fee\u6539 ",(0,r.kt)("inlineCode",{parentName:"p"},"parseHeaders")," \u7684\u5b9e\u73b0\u903b\u8f91\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export function parseHeaders(headers: string): any {\n  let parsed = Object.create(null)\n  if (!headers) {\n    return parsed\n  }\n\n  headers.split('\\r\\n').forEach(line => {\n    let [key, ...vals] = line.split(':')\n    key = key.trim().toLowerCase()\n    if (!key) {\n      return\n    }\n    let val = vals.join(':').trim()\n    parsed[key] = val\n  })\n\n  return parsed\n}\n")),(0,r.kt)("p",null,"\u8fd9\u6837\u6211\u4eec\u518d\u91cd\u65b0\u8dd1\u6d4b\u8bd5\uff0c\u5c31\u4f1a\u901a\u8fc7\u4e86\u3002"),(0,r.kt)("h3",{id:"url-\u6a21\u5757\u6d4b\u8bd5"},"url \u6a21\u5757\u6d4b\u8bd5"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"test/helpers/url.spec.ts"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { buildURL, isAbsoluteURL, combineURL, isURLSameOrigin } from '../../src/helpers/url'\n\ndescribe('helpers:url', () => {\n  describe('buildURL', () => {\n    test('should support null params', () => {\n      expect(buildURL('/foo')).toBe('/foo')\n    })\n\n    test('should support params', () => {\n      expect(\n        buildURL('/foo', {\n          foo: 'bar'\n        })\n      ).toBe('/foo?foo=bar')\n    })\n\n    test('should ignore if some param value is null', () => {\n      expect(\n        buildURL('/foo', {\n          foo: 'bar',\n          baz: null\n        })\n      ).toBe('/foo?foo=bar')\n    })\n\n    test('should ignore if the only param value is null', () => {\n      expect(\n        buildURL('/foo', {\n          baz: null\n        })\n      ).toBe('/foo')\n    })\n\n    test('should support object params', () => {\n      expect(\n        buildURL('/foo', {\n          foo: {\n            bar: 'baz'\n          }\n        })\n      ).toBe('/foo?foo=' + encodeURI('{\"bar\":\"baz\"}'))\n    })\n\n    test('should support date params', () => {\n      const date = new Date()\n\n      expect(\n        buildURL('/foo', {\n          date: date\n        })\n      ).toBe('/foo?date=' + date.toISOString())\n    })\n\n    test('should support array params', () => {\n      expect(\n        buildURL('/foo', {\n          foo: ['bar', 'baz']\n        })\n      ).toBe('/foo?foo[]=bar&foo[]=baz')\n    })\n\n    test('should support special char params', () => {\n      expect(\n        buildURL('/foo', {\n          foo: '@:$, '\n        })\n      ).toBe('/foo?foo=@:$,+')\n    })\n\n    test('should support existing params', () => {\n      expect(\n        buildURL('/foo?foo=bar', {\n          bar: 'baz'\n        })\n      ).toBe('/foo?foo=bar&bar=baz')\n    })\n\n    test('should correct discard url hash mark', () => {\n      expect(\n        buildURL('/foo?foo=bar#hash', {\n          query: 'baz'\n        })\n      ).toBe('/foo?foo=bar&query=baz')\n    })\n\n    test('should use serializer if provided', () => {\n      const serializer = jest.fn(() => {\n        return 'foo=bar'\n      })\n      const params = { foo: 'bar' }\n      expect(buildURL('/foo', params, serializer)).toBe('/foo?foo=bar')\n      expect(serializer).toHaveBeenCalled()\n      expect(serializer).toHaveBeenCalledWith(params)\n    })\n\n    test('should support URLSearchParams', () => {\n      expect(buildURL('/foo', new URLSearchParams('bar=baz'))).toBe('/foo?bar=baz')\n    })\n  })\n\n  describe('isAbsoluteURL', () => {\n    test('should return true if URL begins with valid scheme name', () => {\n      expect(isAbsoluteURL('https://api.github.com/users')).toBeTruthy()\n      expect(isAbsoluteURL('custom-scheme-v1.0://example.com/')).toBeTruthy()\n      expect(isAbsoluteURL('HTTP://example.com/')).toBeTruthy()\n    })\n\n    test('should return false if URL begins with invalid scheme name', () => {\n      expect(isAbsoluteURL('123://example.com/')).toBeFalsy()\n      expect(isAbsoluteURL('!valid://example.com/')).toBeFalsy()\n    })\n\n    test('should return true if URL is protocol-relative', () => {\n      expect(isAbsoluteURL('//example.com/')).toBeTruthy()\n    })\n\n    test('should return false if URL is relative', () => {\n      expect(isAbsoluteURL('/foo')).toBeFalsy()\n      expect(isAbsoluteURL('foo')).toBeFalsy()\n    })\n  })\n\n  describe('combineURL', () => {\n    test('should combine URL', () => {\n      expect(combineURL('https://api.github.com', '/users')).toBe('https://api.github.com/users')\n    })\n\n    test('should remove duplicate slashes', () => {\n      expect(combineURL('https://api.github.com/', '/users')).toBe('https://api.github.com/users')\n    })\n\n    test('should insert missing slash', () => {\n      expect(combineURL('https://api.github.com', 'users')).toBe('https://api.github.com/users')\n    })\n\n    test('should not insert slash when relative url missing/empty', () => {\n      expect(combineURL('https://api.github.com/users', '')).toBe('https://api.github.com/users')\n    })\n\n    test('should allow a single slash for relative url', () => {\n      expect(combineURL('https://api.github.com/users', '/')).toBe('https://api.github.com/users/')\n    })\n  })\n\n  describe('isURLSameOrigin', () => {\n    test('should detect same origin', () => {\n      expect(isURLSameOrigin(window.location.href)).toBeTruthy()\n    })\n\n    test('should detect different origin', () => {\n      expect(isURLSameOrigin('https://github.com/axios/axios')).toBeFalsy()\n    })\n  })\n})\n")),(0,r.kt)("p",null,"\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 ",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/jest-object#jestfnimplementation"},(0,r.kt)("inlineCode",{parentName:"a"},"jest.fn"))," \u53bb\u6a21\u62df\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u4e2a\u4e5f\u662f\u5728\u7f16\u5199 Jest \u6d4b\u8bd5\u4e2d\u975e\u5e38\u5e38\u7528\u7684\u4e00\u4e2a API\u3002"),(0,r.kt)("p",null,"\u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-axios")," \u5e93 ",(0,r.kt)("inlineCode",{parentName:"p"},"helpers")," \u76ee\u5f55\u4e0b\u6240\u6709\u6a21\u5757\u7684\u6d4b\u8bd5\uff0c\u5e76\u628a\u8be5\u76ee\u5f55\u4e0b\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u8fbe\u5230\u4e86\u8fd1\u4e4e 100% \u7684\u8986\u76d6\u7387\u3002\u4e0b\u9762\u7684\u7ae0\u8282\u6211\u4eec\u5c31\u5f00\u59cb\u6d4b\u8bd5 ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-axios")," \u7684\u6838\u5fc3\u6d41\u7a0b\uff0c\u9488\u5bf9\u4e0d\u540c\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"feature")," \u53bb\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u4e86\u3002"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"\u8bf7\u6c42\u6a21\u5757"},"\u8bf7\u6c42\u6a21\u5757"),(0,r.kt)("p",null,"\u8bf7\u6c42\u6a21\u5757\u662f axios \u6700\u57fa\u7840\u7684\u6a21\u5757\uff0c\u901a\u8fc7\u4e00\u4e2a axios \u65b9\u6cd5\u53d1\u9001 Ajax \u8bf7\u6c42\u3002"),(0,r.kt)("h3",{id:"jasmine-ajax"},"jasmine-ajax"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://jasmine.github.io/pages/getting_started.html"},"Jasmine")," \u662f\u4e00\u4e2a BDD(\u884c\u4e3a\u9a71\u52a8\u5f00\u53d1)\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u5b83\u6709\u5f88\u591a\u6210\u719f\u7684\u63d2\u4ef6\uff0c\u6bd4\u5982\u6211\u4eec\u8981\u7528\u5230\u7684 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jasmine/jasmine-ajax"},(0,r.kt)("inlineCode",{parentName:"a"},"jasmine-ajax")),"\uff0c\u5b83\u4f1a\u4e3a\u6211\u4eec\u53d1\u51fa\u7684 Ajax \u8bf7\u6c42\u6839\u636e\u89c4\u8303\u5b9a\u4e49\u4e00\u7ec4\u5047\u7684\u54cd\u5e94\uff0c\u5e76\u8ddf\u8e2a\u6211\u4eec\u53d1\u51fa\u7684Ajax\u8bf7\u6c42\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u65b9\u4fbf\u7684\u4e3a\u7ed3\u679c\u505a\u65ad\u8a00\u3002"),(0,r.kt)("p",null,"\u5176\u5b9e Jest \u4e5f\u53ef\u4ee5\u53bb\u5199\u63d2\u4ef6\uff0c\u4f46\u5e76\u6ca1\u6709\u73b0\u6210\u7684 Ajax \u76f8\u5173\u7684 Jest \u63d2\u4ef6\uff0c\u4f46\u662f Jest \u6d4b\u8bd5\u4e2d\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528 Jasmine \u76f8\u5173\u7684\u63d2\u4ef6\uff0c\u53ea\u9700\u8981\u505a\u4e00\u4e9b\u5c0f\u5c0f\u7684\u914d\u7f6e\u5373\u53ef\u3002"),(0,r.kt)("p",null,"\u5f53\u7136\uff0c\u672a\u6765\u6211\u4e5f\u4f1a\u8003\u8651\u53bb\u7f16\u5199\u4e00\u4e2a Ajax \u76f8\u5173\u7684 Jest \u63d2\u4ef6\uff0c\u76ee\u524d\u6211\u4eec\u4ecd\u7136\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine-ajax")," \u53bb\u914d\u5408\u6211\u4eec\u7f16\u5199\u6d4b\u8bd5\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"jasmine-ajax")," \u4f9d\u8d56 ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine-core"),"\uff0c\u56e0\u6b64\u9996\u5148\u6211\u4eec\u8981\u5b89\u88c5\u51e0\u4e2a\u4f9d\u8d56\u5305\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine-ajax"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine-core")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"@types/jasmine-ajax"),"\u3002"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u9700\u8981\u53bb\u4fee\u6539 ",(0,r.kt)("inlineCode",{parentName:"p"},"test/boot.ts")," \u6587\u4ef6\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8dd1\u5177\u4f53\u6d4b\u8bd5\u4ee3\u7801\u4e4b\u524d\u4f1a\u5148\u8fd0\u884c\u8be5\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u53bb\u521d\u59cb\u5316 ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine-ajax"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const JasmineCore = require('jasmine-core')\n// @ts-ignore\nglobal.getJasmineRequireObj = function() {\n  return JasmineCore\n}\nrequire('jasmine-ajax')\n")),(0,r.kt)("p",null,"\u8fd9\u91cc\u4e3a\u4e86\u8ba9 ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine-ajax")," \u63d2\u4ef6\u8fd0\u884c\u6210\u529f\uff0c\u6211\u4eec\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u5168\u5c40\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"getJasmineRequireObj")," \u65b9\u6cd5\uff0c\u53c2\u8003 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jasmine/jasmine-ajax/issues/178"},"issue"),"\u3002"),(0,r.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u5f00\u59cb\u7f16\u5199\u8bf7\u6c42\u6a21\u5757\u7684\u5355\u5143\u6d4b\u8bd5\u3002"),(0,r.kt)("h3",{id:"\u6d4b\u8bd5\u4ee3\u7801\u7f16\u5199"},"\u6d4b\u8bd5\u4ee3\u7801\u7f16\u5199"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"test/requests.spec.ts"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import axios, { AxiosResponse, AxiosError } from '../src/index'\nimport { getAjaxRequest } from './helper'\n\ndescribe('requests', () => {\n  beforeEach(() => {\n    jasmine.Ajax.install()\n  })\n\n  afterEach(() => {\n    jasmine.Ajax.uninstall()\n  })\n\n  test('should treat single string arg as url', () => {\n    axios('/foo')\n\n    return getAjaxRequest().then(request => {\n      expect(request.url).toBe('/foo')\n      expect(request.method).toBe('GET')\n    })\n  })\n\n  test('should treat method value as lowercase string', done => {\n    axios({\n      url: '/foo',\n      method: 'POST'\n    }).then(response => {\n      expect(response.config.method).toBe('post')\n      done()\n    })\n\n    getAjaxRequest().then(request => {\n      request.respondWith({\n        status: 200\n      })\n    })\n  })\n\n  test('should reject on network errors', done => {\n    const resolveSpy = jest.fn((res: AxiosResponse) => {\n      return res\n    })\n\n    const rejectSpy = jest.fn((e: AxiosError) => {\n      return e\n    })\n\n    jasmine.Ajax.uninstall()\n\n    axios('/foo')\n      .then(resolveSpy)\n      .catch(rejectSpy)\n      .then(next)\n\n    function next(reason: AxiosResponse | AxiosError) {\n      expect(resolveSpy).not.toHaveBeenCalled()\n      expect(rejectSpy).toHaveBeenCalled()\n      expect(reason instanceof Error).toBeTruthy()\n      expect((reason as AxiosError).message).toBe('Network Error')\n      expect(reason.request).toEqual(expect.any(XMLHttpRequest))\n\n      jasmine.Ajax.install()\n\n      done()\n    }\n  })\n\n  test('should reject when request timeout', done => {\n    let err: AxiosError\n\n    axios('/foo', {\n      timeout: 2000,\n      method: 'post'\n    }).catch(error => {\n      err = error\n    })\n\n    getAjaxRequest().then(request => {\n      // @ts-ignore\n      request.eventBus.trigger('timeout')\n\n      setTimeout(() => {\n        expect(err instanceof Error).toBeTruthy()\n        expect(err.message).toBe('Timeout of 2000 ms exceeded')\n        done()\n      }, 100)\n    })\n  })\n\n  test('should reject when validateStatus returns false', done => {\n    const resolveSpy = jest.fn((res: AxiosResponse) => {\n      return res\n    })\n\n    const rejectSpy = jest.fn((e: AxiosError) => {\n      return e\n    })\n\n    axios('/foo', {\n      validateStatus(status) {\n        return status !== 500\n      }\n    })\n      .then(resolveSpy)\n      .catch(rejectSpy)\n      .then(next)\n\n    getAjaxRequest().then(request => {\n      request.respondWith({\n        status: 500\n      })\n    })\n\n    function next(reason: AxiosError | AxiosResponse) {\n      expect(resolveSpy).not.toHaveBeenCalled()\n      expect(rejectSpy).toHaveBeenCalled()\n      expect(reason instanceof Error).toBeTruthy()\n      expect((reason as AxiosError).message).toBe('Request failed with status code 500')\n      expect((reason as AxiosError).response!.status).toBe(500)\n\n      done()\n    }\n  })\n\n  test('should resolve when validateStatus returns true', done => {\n    const resolveSpy = jest.fn((res: AxiosResponse) => {\n      return res\n    })\n\n    const rejectSpy = jest.fn((e: AxiosError) => {\n      return e\n    })\n\n    axios('/foo', {\n      validateStatus(status) {\n        return status === 500\n      }\n    })\n      .then(resolveSpy)\n      .catch(rejectSpy)\n      .then(next)\n\n    getAjaxRequest().then(request => {\n      request.respondWith({\n        status: 500\n      })\n    })\n\n    function next(res: AxiosResponse | AxiosError) {\n      expect(resolveSpy).toHaveBeenCalled()\n      expect(rejectSpy).not.toHaveBeenCalled()\n      expect(res.config.url).toBe('/foo')\n\n      done()\n    }\n  })\n\n  test('should return JSON when resolved', done => {\n    let response: AxiosResponse\n\n    axios('/api/account/signup', {\n      auth: {\n        username: '',\n        password: ''\n      },\n      method: 'post',\n      headers: {\n        Accept: 'application/json'\n      }\n    }).then(res => {\n      response = res\n    })\n\n    getAjaxRequest().then(request => {\n      request.respondWith({\n        status: 200,\n        statusText: 'OK',\n        responseText: '{\"a\": 1}'\n      })\n\n      setTimeout(() => {\n        expect(response.data).toEqual({ a: 1 })\n        done()\n      }, 100)\n    })\n  })\n\n  test('should return JSON when rejecting', done => {\n    let response: AxiosResponse\n\n    axios('/api/account/signup', {\n      auth: {\n        username: '',\n        password: ''\n      },\n      method: 'post',\n      headers: {\n        Accept: 'application/json'\n      }\n    }).catch(error => {\n      response = error.response\n    })\n\n    getAjaxRequest().then(request => {\n      request.respondWith({\n        status: 400,\n        statusText: 'Bad Request',\n        responseText: '{\"error\": \"BAD USERNAME\", \"code\": 1}'\n      })\n\n      setTimeout(() => {\n        expect(typeof response.data).toBe('object')\n        expect(response.data.error).toBe('BAD USERNAME')\n        expect(response.data.code).toBe(1)\n        done()\n      }, 100)\n    })\n  })\n\n  test('should supply correct response', done => {\n    let response: AxiosResponse\n\n    axios.post('/foo').then(res => {\n      response = res\n    })\n\n    getAjaxRequest().then(request => {\n      request.respondWith({\n        status: 200,\n        statusText: 'OK',\n        responseText: '{\"foo\": \"bar\"}',\n        responseHeaders: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      setTimeout(() => {\n        expect(response.data.foo).toBe('bar')\n        expect(response.status).toBe(200)\n        expect(response.statusText).toBe('OK')\n        expect(response.headers['content-type']).toBe('application/json')\n        done()\n      }, 100)\n    })\n  })\n\n  test('should allow overriding Content-Type header case-insensitive', () => {\n    let response: AxiosResponse\n\n    axios\n      .post(\n        '/foo',\n        { prop: 'value' },\n        {\n          headers: {\n            'content-type': 'application/json'\n          }\n        }\n      )\n      .then(res => {\n        response = res\n      })\n\n    return getAjaxRequest().then(request => {\n      expect(request.requestHeaders['Content-Type']).toBe('application/json')\n    })\n  })\n})\n")),(0,r.kt)("p",null,"\u6211\u4eec\u8981\u6ce8\u610f\u7684\u4e00\u4e9b\u70b9\uff0c\u5728\u8fd9\u91cc\u5217\u51fa\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"beforeEach & afterEach")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/api#beforeeachfn-timeout"},"beforeEach"),"\u8868\u793a\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u8fd0\u884c\u524d\u7684\u94a9\u5b50\u51fd\u6570\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u6267\u884c ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine.Ajax.install()")," \u5b89\u88c5 ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine.Ajax"),"\u3002"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/api#aftereachfn-timeout"},"afterEach"),"\u8868\u793a\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u8fd0\u884c\u540e\u7684\u94a9\u5b50\u51fd\u6570\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u6267\u884c ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine.Ajax.uninstall()")," \u5378\u8f7d ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine.Ajax"),"\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getAjaxRequest"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getAjaxRequest")," \u662f\u6211\u4eec\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"test/helper.ts")," \u5b9a\u4e49\u7684\u4e00\u4e2a\u8f85\u52a9\u65b9\u6cd5\uff0c\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine.Ajax.requests.mostRecent()")," \u62ff\u5230\u6700\u8fd1\u4e00\u6b21\u8bf7\u6c42\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"request")," \u5bf9\u8c61\uff0c\u8fd9\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"request")," \u5bf9\u8c61\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine-ajax")," \u5e93\u4f2a\u9020\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"xhr")," \u5bf9\u8c61\uff0c\u5b83\u6a21\u62df\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"xhr")," \u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e00\u4e9b ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," \u8ba9\u6211\u4eec\u4f7f\u7528\uff0c\u6bd4\u5982 ",(0,r.kt)("inlineCode",{parentName:"p"},"request.respondWith")," \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5f02\u6b65\u6d4b\u8bd5")),(0,r.kt)("p",null,"\u6ce8\u610f\u5230\u6211\u4eec\u8fd9\u91cc\u5927\u90e8\u5206\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u518d\u662f\u540c\u6b65\u7684\u4ee3\u7801\u4e86\uff0c\u51e0\u4e4e\u90fd\u662f\u4e00\u4e9b\u5f02\u6b65\u903b\u8f91\uff0cJest \u975e\u5e38\u597d\u5730\u652f\u6301",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/asynchronous"},"\u5f02\u6b65\u6d4b\u8bd5\u4ee3\u7801"),"\u3002\u901a\u5e38\u6709 2 \u79cd\u89e3\u51b3\u65b9\u6848\u3002"),(0,r.kt)("p",null,"\u7b2c\u4e00\u79cd\u662f\u5229\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"done")," \u53c2\u6570\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u51fd\u6570\u6709\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"done")," \u53c2\u6570\uff0c\u4e00\u65e6\u6211\u4eec\u4f7f\u7528\u4e86\u8be5\u53c2\u6570\uff0c\u53ea\u6709\u5f53 ",(0,r.kt)("inlineCode",{parentName:"p"},"done")," \u51fd\u6570\u6267\u884c\u7684\u65f6\u5019\u8868\u793a\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u675f\u3002"),(0,r.kt)("p",null,"\u7b2c\u4e8c\u79cd\u662f\u6211\u4eec\u7684\u6d4b\u8bd5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a Promise \u5bf9\u8c61\uff0c\u4e00\u65e6\u8fd9\u4e2a Promise \u5bf9\u8c61 ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve")," \u4e86\uff0c\u8868\u793a\u8fd9\u4e2a\u6d4b\u8bd5\u7ed3\u675f\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"expect.any(constructor)")),(0,r.kt)("p",null,"\u5b83\u8868\u793a\u5339\u914d\u4efb\u610f\u7531 ",(0,r.kt)("inlineCode",{parentName:"p"},"constructor")," \u521b\u5efa\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"request.eventBus.trigger"))),(0,r.kt)("p",null,"\u7531\u4e8e ",(0,r.kt)("inlineCode",{parentName:"p"},"request.responseTimeout")," \u65b9\u6cd5\u5185\u90e8\u4f9d\u8d56\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"jasmine.clock")," \u65b9\u6cd5\u4f1a\u5bfc\u81f4\u8fd0\u884c\u5931\u8d25\uff0c\u8fd9\u91cc\u6211\u76f4\u63a5\u7528\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"request.eventBus.trigger('timeout')")," \u65b9\u6cd5\u89e6\u53d1\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout")," \u4e8b\u4ef6\u3002\u56e0\u4e3a\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u5728\u63a5\u53e3\u5b9a\u4e49\u4e2d\uff0c\u6240\u4ee5\u9700\u8981\u52a0 ",(0,r.kt)("inlineCode",{parentName:"p"},"// @ts-ignore"),"\u3002"),(0,r.kt)("p",null,"\u53e6\u5916\uff0c\u6211\u4eec\u5728\u6d4b\u8bd5\u4e2d\u53d1\u73b0 2 \u4e2a case \u6ca1\u6709\u901a\u8fc7\u3002"),(0,r.kt)("p",null,"\u7b2c\u4e00\u4e2a\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"should treat method value as lowercase string"),"\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u662f\u6211\u4eec\u53d1\u9001\u8bf7\u6c42\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"}," method")," \u9700\u8981\u8f6c\u6362\u6210\u5c0f\u5199\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e48\u505a\u7684\u76ee\u7684\u4e5f\u662f\u4e3a\u4e86\u4e4b\u540e ",(0,r.kt)("inlineCode",{parentName:"p"},"flattenHeaders")," \u80fd\u6b63\u5e38\u5904\u7406\u8fd9\u4e9b ",(0,r.kt)("inlineCode",{parentName:"p"},"method"),"\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4fee\u6539\u6e90\u7801\u903b\u8f91\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"core/Axios.ts"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"  request(url: any, config?: any): AxiosPromise {\n    if (typeof url === 'string') {\n      if (!config) {\n        config = {}\n      }\n      config.url = url\n    } else {\n      config = url\n    }\n\n    config = mergeConfig(this.defaults, config)\n    config.method = config.method.toLowerCase()\n    \n    // ...\n  }\n")),(0,r.kt)("p",null,"\u5728\u5408\u5e76\u914d\u7f6e\u540e\uff0c\u6211\u4eec\u9700\u8981\u628a ",(0,r.kt)("inlineCode",{parentName:"p"},"config.method")," \u8f6c\u6210\u5c0f\u5199\u5b57\u7b26\u4e32\u3002"),(0,r.kt)("p",null,"\u53e6\u4e00\u4e2a\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"should return JSON when rejecting"),"\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u662f\u5f53\u6211\u4eec\u53d1\u9001\u8bf7\u6c42\u5931\u8d25\u540e\uff0c\u4e5f\u80fd\u628a\u54cd\u5e94\u6570\u636e\u8f6c\u6362\u6210 JSON \u683c\u5f0f\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u4fee\u6539\u6e90\u7801\u903b\u8f91\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"core/dispatchRequest.ts"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default function dispatchRequest(config: AxiosRequestConfig): AxiosPromise {\n  throwIfCancellationRequested(config)\n  processConfig(config)\n  return xhr(config).then(\n    res => {\n      return transformResponseData(res)\n    },\n    e => {\n      if (e && e.response) {\n        e.response = transformResponseData(e.response)\n      }\n      return Promise.reject(e)\n    }\n  )\n}\n")),(0,r.kt)("p",null,"\u9664\u4e86\u5bf9\u6b63\u5e38\u60c5\u51b5\u7684\u54cd\u5e94\u6570\u636e\u505a\u8f6c\u6362\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5bf9\u5f02\u5e38\u60c5\u51b5\u7684\u54cd\u5e94\u6570\u636e\u505a\u8f6c\u6362\u3002"),(0,r.kt)("p",null,"\u81f3\u6b64\u6211\u4eec\u5b8c\u6210\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-axios")," \u5e93\u5bf9\u8bf7\u6c42\u6a21\u5757\u7684\u6d4b\u8bd5\uff0c\u4e0b\u4e00\u8282\u8bfe\u6211\u4eec\u4f1a\u4ece\u4e1a\u52a1\u7684\u89d2\u5ea6\u6765\u6d4b\u8bd5 ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," \u6a21\u5757\u3002"))}d.isMDXComponent=!0}}]);